#include <immintrin.h>
#include <stdlib.h>
#include "stdio.h"
#include <stdbool.h>
#include "math.h"
#include <time.h> 
#include "omp.h"

#define N_Thread 10
//using namespace std;

int* mat_3d_maker(int height, int width, int ch, bool zero) {
	//int* mat = new int[width * height * ch];
	int* mat = malloc((width * height * ch) * sizeof(int));
	int num = 0;

	int r = 0;
	int c = 0;
	int in_ch = 0;
	int offset = 0;

	for (int i = 0; i < ch; ++i) {

		for (int j = 0; j < height; ++j) {

			for (int k = 0; k < width; ++k) {
				in_ch = i * height * width;
				r = j * width;
				c = k;

				offset = in_ch + r + c;

				if (num >= height * width) {
					num = 0;
				}

				if (!zero) {
					*(mat + offset) = num;
				}
				else {
					*(mat + offset) = 0;
				}

				num++;
			}
		}
	}

	return mat;
}

void print_3d_mat(int* mat, int row, int col, int ch) {
	for (int i = 0; i < ch; i++)
	{
		printf("set %d \n", i);
		for (int j = 0; j < row; j++)
		{
			for (int k = 0; k < col; k++)
				printf("%d ", *(mat + i * row * col + j * col + k));


			printf("\n");
		}
		printf("\n");
	}

	return 1;
}

int* kernel_4d_maker(int height, int width, int in_ch, int out_ch) {

	int* set = malloc((width * height * in_ch * out_ch) * sizeof(int));
	int num = 0;

	int r = 0;
	int c = 0;
	int i_ch = 0;
	int o_ch = 0;
	int offset = 0;

	for (int l = 0; l < out_ch; l++) {
		for (int i = 0; i < in_ch; ++i) {
			for (int j = 0; j < height; ++j) {
				for (int k = 0; k < width; ++k) {
					o_ch = l * in_ch * height * width;
					i_ch = i * height * width;
					r = j * width;
					c = k;

					offset = o_ch + i_ch + r + c;

					*(set + offset) = rand() % 2;

				}
			}
		}
	}
	return set;
}

void print_k_4d_mat(int* mat, int row, int col, int in_ch, int out_ch) {
	for (int i = 0; i < out_ch; i++)
	{
		printf("set %d \n", i);

		for (int l = 0; l < in_ch; l++) {

			for (int j = 0; j < row; j++)
			{
				for (int k = 0; k < col; k++)
					printf("%d ", *(mat + i * in_ch * row * col + l * row * col + j * col + k));

				printf("\n");
			}
			printf("\n");
		}
	}
	return 1;
}

void print128_num(__m128i var)
{
	int* val = (int*)& var;
	printf("Numerical: %i %i %i %i \n",
		val[0], val[1], val[2], val[3]);
	return 1;
}

int mult(int* matout, int* mat1, int* k_set, int kc, int kr, int p_c, int p_r) {
	//printf("%d ", *mat1);
	__m128i vsum = _mm_set1_epi32(0);
	__m128i vsum2 = _mm_set1_epi32(0);
	__m128i v1, v2, v3;
	__m128i sum;

	int size = kc * kr;
	int rem = size % 4;
	int nloop = size / 4;
	
	int k_index_x1 = 0;
	int k_index_y1 = 0;
	int k_index_x2 = 0;
	int k_index_y2 = 0;
	int k_index_x3 = 0;
	int k_index_y3 = 0;
	int k_index_x4 = 0;
	int k_index_y4 = 0;

	int k1 = 0;
	int k2 = 0;
	int k3 = 0;
	int k4 = 0;

	int in_index1 = 0;
	int in_index2 = 0;
	int in_index3 = 0;
	int in_index4 = 0;

	int i1 = 0;
	int i2 = 0;
	int i3 = 0;
	int i4 = 0;

	int end = 0;
	int end_sum = 0;

	int total=0;

	int counter = 0;
	counter++;
	for (int i = 0; i < nloop; ++i) {//dealing in partitions of 4

		k1 = *(k_set + (4 * i + 0));
		k_index_y1 = (4 * i + 0) / kc;
		k_index_x1 = (4 * i + 0) % kr;

		k2 = *(k_set + (4 * i + 1));
		k_index_y2 = (4 * i + 1) / kc;
		k_index_x2 = (4 * i + 1) % kr;

		k3 = *(k_set + (4 * i + 2));
		k_index_y3 = (4 * i + 2) / kc;
		k_index_x3 = (4 * i + 2) % kr;

		k4 = *(k_set + (4 * i + 3));
		k_index_y4 = (4 * i + 3) / kc;
		k_index_x4 = (4 * i + 3) % kr;

		end = (4 * i + 3);

		v1 = _mm_setr_epi32(k1, k2, k3, k4);
		//printf("weight: ");
		//print128_num(v1);
		
		in_index1 = k_index_y1 * p_c + k_index_x1;
		in_index2 = k_index_y2 * p_c + k_index_x2;
		in_index3 = k_index_y3 * p_c + k_index_x3;
		in_index4 = k_index_y4 * p_c + k_index_x4;

		i1 = *(mat1 + in_index1);
		i2 = *(mat1 + in_index2);
		i3 = *(mat1 + in_index3);
		i4 = *(mat1 + in_index4);

		v2 = _mm_setr_epi32(i1, i2, i3, i4);
		// printf("input: ");
		//print128_num(v2);

		v3 = _mm_mullo_epi32(v1, v2);
		//printf("mult: ");
		//print128_num(v3);

		vsum = _mm_add_epi32(vsum, v3);
		//printf("vsum: ");
		//print128_num(vsum);
		
		//printf("\n");
	}

	//print128_num(vsum);
	//print128_num(vsum2);
	sum = _mm_hadd_epi32(vsum, vsum2);
	sum = _mm_hadd_epi32(sum, vsum2);
	
	//print128_num(sum);

	total += _mm_extract_epi32(sum, 0);
		//printf("%d ", sum);

	if (rem == 0) {
		//printf("round ");
	}
	else if (rem == 1) {
		k1 = *(k_set + (end + 1));
		k_index_y1 = (end + 1) / kc;
		k_index_x1 = (end + 1) % kr;
		i1 = k_index_y1 * p_c + k_index_x1;
		end_sum += i1 * k1;

	}
	else if (rem == 2) {
		k1 = *(k_set + (end + 1));
		k_index_y1 = (end + 1) / kc;
		k_index_x1 = (end + 1) % kr;
		i1 = k_index_y1 * p_c + k_index_x1;
		end_sum += i1 * k1;

		k2 = *(k_set + (end + 2));
		k_index_y2 = (end + 2) / kc;
		k_index_x2 = (end + 2) % kr;
		i2 = k_index_y2 * p_c + k_index_x2;
		end_sum += i2 * k2;
	}
	else if (rem == 3) {
		k1 = *(k_set + (end + 1));
		k_index_y1 = (end + 1) / kc;
		k_index_x1 = (end + 1) % kr;
		i1 = k_index_y1 * p_c + k_index_x1;
		end_sum += i1 * k1;

		k2 = *(k_set + (end + 2));
		k_index_y2 = (end + 2) / kc;
		k_index_x2 = (end + 2) % kr;
		i2 = k_index_y2 * p_c + k_index_x2;
		end_sum += i2 * k2;

		k3 = *(k_set + (end + 3));
		k_index_y3 = (end + 3) / kc;
		k_index_x3 = (end + 3) % kr;
		i3 = k_index_y3 * p_c + k_index_x3;
		end_sum += i3 * k3;
	}
	else {
		printf("misc ");
	}

	//for (int j = 0; j < rem; ++j) {
	//	//printf("%d ", rem);
	//	end++;
	//	k1 = *(k_set + end);
	//	k_index_y1 = (4 * nloop + j) / kc;
	//	k_index_x1 = (4 * nloop + j) % kr;
	//	
	//	i1 = k_index_y1 * p_c + k_index_x1;
	//	end_sum += i1 * k1;
	//}

	total += end_sum;
	//printf("\n ");
	return total;
}

int* pad_3d_mat(int* mat_in, int kr, int kc, int ch, int pad_height, int pad_width) {
		int* mat = malloc((pad_width * pad_height * ch) * sizeof(int));
		int num = 0;

		int diff_r = 2* ((kr - 1.0) / 2.0);
		int diff_c = 2* ((kc - 1.0) / 2.0);
		

		int diff_r_L = diff_r / 2.0;
		int diff_r_R = ceil(diff_r / 2.0);
		
		int diff_c_L = diff_c / 2.0;
		int diff_c_R = ceil(diff_c / 2.0);

		int r = 0;
		int c = 0;
		int in_ch = 0;
		int offset = 0;

		int counter = 0;

		for (int i = 0; i < ch; ++i) {

			for (int j = 0; j < pad_height; ++j) {

				for (int k = 0; k < pad_width; ++k) {
					in_ch = i * pad_height * pad_width;
					r = j * pad_width;
					c = k;

					offset = in_ch + r + c;

					if (j > diff_r_L - 1 && j < (pad_height - diff_r_R) && k > diff_c_L - 1 && k < (pad_width - diff_c_R)) {
						*(mat + offset) = *(mat_in++);
						
					}
					else {
						*(mat + offset) = 0;
					}

				}
			}
		}
	

		return mat;
	}


/* MAIN CODE*/

extern const int row_in = 8;
extern const int col_in = 8;
extern const int in_channel = 1;

extern const int kr = 4;
extern const int kc = 4;
extern const int out_channel = 1;

int main() {

	/* IMAGE MATRIX*/
	printf("------------------------------- \n");
	printf("INPUT: \n \n");
	int* mat_in = mat_3d_maker(row_in, col_in, in_channel, 0);
	//print_3d_mat(mat_in, row_in, col_in, in_channel);

	/* KERNEL MATRIX*/
	printf("------------------------------- \n");
	printf("KERNEL: \n \n");
	int* K_set = kernel_4d_maker(kr, kc, in_channel, out_channel);
	//print_k_4d_mat(K_set, kr, kc, in_channel, out_channel);

	/* OUTPUT MATRIX*/
	printf("------------------------------- \n");
	printf("OUTPUT: \n \n");
	int* mat_out = mat_3d_maker(row_in, col_in, out_channel, 1);
	//print_3d_mat(mat_out, row_in, col_in, out_channel);

	/* PADDED MATRIX*/
	printf("------------------------------- \n");
	printf("PADDED INPUT: \n \n");

	float pad_r = 2 * ((kr - 1.0) / 2.0);
	float pad_c = 2 * ((kc - 1.0) / 2.0);
	int pad_row_in = row_in + pad_r;
	int pad_col_in = col_in + pad_c;

	int* pad_mat_in = pad_3d_mat(mat_in, kr, kc, in_channel, pad_row_in, pad_col_in);
	//print_3d_mat(pad_mat_in, pad_row_in, pad_col_in, in_channel);

	/*MATRIX CONVOLUTION SECTION*/
	int weight = 0;
	int im_in = 0;

	int kcenterx = kc / 2;
	int kcentery = kr / 2;
	int k_x = 0;
	int k_y = 0;
	int i_x = 0;
	int i_y = 0;

	int i_in_ch = 0;
	int i_c = 0;
	int i_r = 0;
	int i_offset = 0;

	int k_out_ch = 0;
	int k_in_ch = 0;
	int k_c = 0;
	int k_r = 0;
	int k_offset = 0;

	int o_in_ch = 0;
	int o_c = 0;
	int o_r = 0;
	int o_offset = 0;

	int index=0;
	int pix = 0;
	int jump = 0;

	clock_t t;
	t = clock();



	for (int i = 0; i < row_in; ++i) {
		for (int j = 0; j < col_in; ++j) {
			for (int m = 0; m < out_channel; ++m) {
				for (int n = 0; n < in_channel; ++n) {
					
					printf("============================ \n");

					k_out_ch = m * in_channel * kr * kc;
					k_in_ch = n * kr * kc;
					k_offset = k_out_ch + k_in_ch;

					i_in_ch = n * pad_row_in * pad_col_in;
					i_c = j;
					i_r = i * pad_col_in;
					i_offset = i_in_ch + i_r + i_c;

					//printf("%d \n", i_offset);
					//printf("%d \n", *(pad_mat_in +i_offset));

					pix= mult(mat_out, (pad_mat_in+i_offset), (K_set+ k_offset), kr, kc, pad_row_in, pad_col_in);
					
					o_in_ch = m * row_in * col_in;
					o_c = j;
					o_r = i * col_in;
					o_offset = o_in_ch + o_r + o_c;

					*(mat_out + o_offset) += pix;

					//printf("%d", i_offset);
					//printf("%d", *(K_set+k_offset));
				
					//print_3d_mat(mat_out, row_in, col_in, out_channel);
					
				}
			}
		}
	}
	t = clock() - t;
	printf("============================ \n");
	printf("result \n");
	printf("============================ \n");
	//print_3d_mat(mat_out, row_in, col_in, out_channel);

	double time_taken = ((double)t) / CLOCKS_PER_SEC; // in seconds 

	printf("Convolution() took %f seconds to execute \n", time_taken);
	return 1;
}
